name: Run default tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Setup Windows
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          vcpkg install libiconv:x64-windows
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
          echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-latest'
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - uses: actions/checkout@v4
      - name: Build
        run: cargo build --verbose
      - name: Run clippy
        run: cargo clippy --verbose
      - name: Run fmt check
        run: cargo fmt --check --verbose
      - name: Run tests
        run: cargo test --verbose

      - name: Install libiconv on macOS
        run: brew install libiconv
        if: matrix.os == 'macos-latest'
      - name: Build libiconv
        run: cargo build --no-default-features --features libiconv --verbose
      - name: Run clippy for libiconv
        run: cargo clippy --no-default-features --features libiconv --verbose
      # Ubuntu does not provide libiconv
      - name: Run tests for libiconv Windows
        run: cargo test --no-default-features --features libiconv --verbose
        if: matrix.os == 'windows-latest'
      - name: Run tests for libiconv macOS
        run: |
          export LIBRARY_PATH=$LIBRARY_PATH:$(brew --prefix)/lib:$(brew --prefix libiconv)/lib
          cargo test --no-default-features --features libiconv --verbose
        if: matrix.os == 'macos-latest'

  build-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Install wasm32-unknown-unknown target
        run: rustup target add wasm32-unknown-unknown
      - name: Run clippy
        run: cargo clippy --verbose
      - name: Run tests
        run: wasm-pack test --node
